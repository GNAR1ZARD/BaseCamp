Deploying to Testnet
Once you have testnet Ether, you can deploy your BasicMath contract!

Selecting the Environment
Open the Deploy & Run Transactions tab. Under Environment, select Injected Provider. It will list Coinbase, Metamask, or any other wallet you have activated here.

Environment

The first time you do this, your wallet will ask you to confirm that you want to connect this app (Remix) to your wallet.

Once you are connected, you'll see the name of the network below the Environment dropdown.

For Base Sepolia, you should see Custom (84532) network. The old network, Goerli, was 84531. If you don't see the correct network, change the active network in your wallet.

Deploy the Contract
Click the orange Deploy button. Because it costs gas to deploy a contract, you'll be asked to review and confirm a transaction.


Verify the Contract
Make sure you still have the address of the contract you deployed in the last article copied to the clipboard.

You can interact with your deployed contract using Remix, the same as before, but it's also possible to interact with it through Etherscan. Paste your address in the search field to find it.

On this page, you can review the balance, information about, and all the transactions that have ever occurred with your contract.

Click the Contract tab in the main panel. At the top is a message asking you to Verify and Publish your contract source code.

Verifying your contract maps the names of your functions and variables to the compiled byte code, which makes it possible to interact with the contract using a human-readable interface.

Click the link. Your contract address is already entered.

Under Please select Compiler Type choose _Solidity (Single file)

For Please Select Compiler Version select the version matching the pragma at the top of your source file. Our examples are currently using v0.8.17+commit.8df45f5f.

For Please select Open Source License Type pick the license that matches what you selected for your contract as the SPDX-License-Identifier. Pick None if you followed the Solidity-recommended practice of using UNLICENSED.

On the next page, copy and paste your source code in the window. Verify that you are not a robot, and click Verify and Publish. You should see a success message.

Click the linked address to your contract to return to the contract page. You'll now see your code!

TIP
If you have imports, you'll need to right click on the name of the file and choose Flatten. Submit the newly generated filename_flattened.sol for verification.

Interact with the Contract
You can now interact with your contract using Etherscan. Click the Read Contract button. Both of your functions will be listed here and can be tested using the web interface.



In Solidity, as in many other programming languages, there is no single enforced standard for code formatting, including the placement of braces. 
Here are a couple of common conventions:

1. **Opening Braces on the Same Line (Egyptian Brackets):**
   - For functions, control structures (`if`, `for`, `while`, etc.), and contract and library definitions, it's common to see the opening brace on the same line as the declaration. This style is often referred to as "Egyptian brackets."
   - Example:
     ```solidity
     function myFunction() public {
         // ...
     }
     ```

2. **Opening Braces on the Next Line:**
   - For function arguments and return types that are too long to fit on one line, the opening brace is often placed on the next line to improve readability.
   - Example:
     ```solidity
     function saveHaiku(
         string memory line1,
         string memory line2,
         string memory line3
     ) public {
         // ...
     }
     ```

3. **Consistency within Context:**
   - Within a single context (e.g., within a struct, contract, or a single function), keeping the brace style consistent can improve readability. For example, all functions in a contract might follow the same brace style.

4. **Multiline Declarations:**
   - When declarations are too long to fit on a single line (such as function headers with many parameters, or complex return types), the opening brace is typically placed on a new line to visually separate the declaration from the implementation.



NatSpec (Natural Language Specification), which is a standard for writing documentation in Solidity code. It's particularly designed for smart contracts.

Here's an overview of the elements in NatSpec comments:

Triple Slashes (///) or Block Comments (/** ... */):

NatSpec comments can be written with triple slashes for single-line comments or with a block comment format for multi-line. Block comments allow you to write more extensive documentation.
Tags (@):

Specific keywords are preceded by the @ symbol to denote special meanings. Common tags include:
@dev: Short for "developer notes." Describes the details of the code's purpose or logic for developers reading the code.
@param: Documents a single parameter of a function. Each parameter in the function should have its own @param detailing its purpose.
@return: Describes what the function returns, used once per function even if multiple values are returned.

ex:
/**
 * @dev Multiplies a number by 7.
 * This is a simple utility function to demonstrate NatSpec comments.
 * @param num The number to be multiplied.
 * @return The result of the multiplication.
 */
function timesSeven(uint num) public pure returns (uint) {
    return num * 7;
}
